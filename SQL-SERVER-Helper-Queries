---------T-SQL to identify the Top 30 costly queries in terms of Total CPU---------------
SELECT TOP 30
    QS.SQL_HANDLE,
    EXECUTIONCOUNT=QS.EXECUTION_COUNT,
    QS.TOTAL_WORKER_TIME AS TOTAL_CPU,
    TOTAL_CPU_INSECONDS = --CONVERTED FROM MICROSECONDS
    QS.TOTAL_WORKER_TIME/1000000,
    AVERAGE_CPU_INSECONDS = --CONVERTED FROM MICROSECONDS
    (QS.TOTAL_WORKER_TIME/1000000) / QS.EXECUTION_COUNT,
    QS.TOTAL_ELAPSED_TIME,
    TOTAL_ELAPSED_TIME_INSECONDS = --CONVERTED FROM MICROSECONDS
    QS.TOTAL_ELAPSED_TIME/1000000,
    ST.TEXT,
    QP.QUERY_PLAN
FROM
    SYS.DM_EXEC_QUERY_STATS AS QS
        CROSS APPLY SYS.DM_EXEC_SQL_TEXT(QS.SQL_HANDLE) AS ST
        CROSS APPLY SYS.DM_EXEC_QUERY_PLAN (QS.PLAN_HANDLE) AS QP
--WHERE DB_NAME(ST.DBID) = 'MYDBName'
ORDER BY QS.TOTAL_WORKER_TIME DESC


----------------------- Currently Executing Queries in SQL SERVER ----------------------- 
SELECT sqltext.TEXT,
req.session_id,
req.status,
req.command,
req.cpu_time,
req.total_elapsed_time
FROM sys.dm_exec_requests req
CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS sqltext


-----------------------SQL SERVER â€“ How to See Active SQL Server Connections For Database-----------------------

SELECT DB_NAME(dbid) AS DBName,
COUNT(dbid) AS NumberOfConnections,
loginame
FROM    sys.sysprocesses
GROUP BY dbid, loginame
ORDER BY DB_NAME(dbid);

-----------------------Script to kill all connections to a database (More than RESTRICTED_USER ROLLBACK)-----------------------

USE master;

DECLARE @kill varchar(8000); SET @kill = '';  
SELECT @kill = @kill + 'kill ' + CONVERT(varchar(5), spid) + ';'  
FROM master..sysprocesses  
WHERE dbid = db_id('MyDB')

EXEC(@kill); 


REFERENCE LINK: https://www.dbrnd.com/2016/04/sql-server-8-different-ways-to-detect-a-deadlock-in-a-database/#prettyPhoto
-----------------------Using SP_LOCK, you can find the WAIT status for blocking sessions-----------------------
 	EXEC SP_LOCK;
	
-----------------------Using sys.sysprocesses----------------------- 	
  SELECT * FROM sys.sysprocesses 
  WHERE blocked > 0;
  
-----------------------Using common DMV-----------------------
	SELECT 	
		der.blocking_session_id AS BlockingSessionID
		,dest.text AS BlockingStatement
	FROM sys.dm_exec_connections AS sdec
	INNER JOIN sys.dm_exec_requests AS der
	    ON sdec.session_id = der.blocking_session_id
	INNER JOIN sys.dm_os_waiting_tasks AS dowt
	    ON der.session_id = dowt.session_id
	CROSS APPLY sys.dm_exec_sql_text(sdec.most_recent_sql_handle) AS dest;
	
	
-----------------------Using sys.dm_tran_locks------------------------
	SELECT 
		request_session_id AS SPID 
		,DB_NAME(resource_database_id) AS DatabaseName
		,resource_type AS LockedResource
		,request_mode AS LockType
	FROM sys.dm_tran_locks 	
	
-----------------------Count total number of DeadLock:-----------------------
    SELECT *,cntr_value AS TotalNumberOfDeadLocks
	FROM sys.dm_os_performance_counters
	WHERE counter_name = 'Number of Deadlocks/sec'
	   AND instance_name = '_Total'	
	   
----------------s will show you the longest running SPIDs on a SQL 2000 or SQL 2005 server:--------------- 
---- https://stackoverflow.com/questions/941763/list-the-queries-running-on-sql-server
select
    P.spid
,   right(convert(varchar, 
            dateadd(ms, datediff(ms, P.last_batch, getdate()), '1900-01-01'), 
            121), 12) as 'batch_duration'
,   P.program_name
,   P.hostname
,   P.loginame
,P.*
from master.dbo.sysprocesses P
where --P.spid > 50
--and      
P.status not in ('background', 'sleeping')
and      P.cmd not in ('AWAITING COMMAND'
                    ,'MIRROR HANDLER'
                    ,'LAZY WRITER'
                    ,'CHECKPOINT SLEEP'
                    ,'RA MANAGER')
order by batch_duration desc

-----------------------------------SQL Server - how to identify if table is heap or B-tree ----------------------------------------------------------
--https://stackoverflow.com/questions/25502950/sql-server-how-to-identify-if-table-is-heap-or-b-tree
select 
    o.name, 
    o.object_id, 
    case 
      when p.index_id = 0 then 'Heap'
      when p.index_id = 1 then 'Clustered Index/b-tree'
      when p.index_id > 1 then 'Non-clustered Index/b-tree'
    end as 'Type'
from sys.objects o
inner join sys.partitions p on p.object_id = o.object_id
where name = 'YourTableName'

-----------------------------------SQL Server - how to identify if table is heap or B-tree ----------------------------------------------------------

